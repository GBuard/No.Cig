{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\FX706\\\\Documents\\\\GitHub\\\\No.Cig\\\\nocig\\\\src\\\\components\\\\Chrono.jsx\",\n  _s = $RefreshSig$();\n/* \r\nÉtape 4 : Connecter le frontend au backend\r\nPour récupérer les données dans ton composant Chrono.jsx, tu vas utiliser fetch ou une bibliothèque comme axios.\r\n\r\nAjout de la récupération des données dans Chrono.jsx :\r\n*/\n\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chrono = () => {\n  _s();\n  const [userStats, setUserStats] = useState(null);\n  const [timeElapsed, setTimeElapsed] = useState(null);\n  useEffect(() => {\n    // Remplace l'ID utilisateur par celui de ton backend\n    const userId = \"uniqueUserId123\";\n    fetch(`http://localhost:5000/api/stats/${userId}`).then(response => response.json()).then(data => {\n      setUserStats(data);\n\n      // Calculer le temps écoulé dès que les données sont récupérées\n      const calculateTimeElapsed = () => {\n        const now = new Date();\n        const start = new Date(data.startDate);\n        const diff = Math.abs(now - start);\n        setTimeElapsed({\n          days: Math.floor(diff / (1000 * 60 * 60 * 24)),\n          hours: Math.floor(diff / (1000 * 60 * 60) % 24),\n          minutes: Math.floor(diff / (1000 * 60) % 60),\n          seconds: Math.floor(diff / 1000 % 60)\n        });\n      };\n      calculateTimeElapsed();\n      const interval = setInterval(calculateTimeElapsed, 1000);\n      return () => clearInterval(interval);\n    }).catch(error => {\n      console.error(\"Error fetching user stats:\", error);\n    });\n  }, []);\n  if (!userStats || !timeElapsed) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 16\n    }, this);\n  }\n  const {\n    moneySaved,\n    lifeGained\n  } = userStats;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"My Progress\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Time since quitting:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [timeElapsed.days, \" days, \", timeElapsed.hours, \" hours,\", \" \", timeElapsed.minutes, \" minutes, \", timeElapsed.seconds, \" seconds\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Money Saved: \", moneySaved, \"\\u20AC\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Life Gained: \", lifeGained, \" hours\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n};\n_s(Chrono, \"iUVOTZZ+6X+oBudReFws4UI+8tk=\");\n_c = Chrono;\nexport default Chrono;\n\n/*\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nconst Chrono = ({ startDate }) => {\r\n  const [timeElapsed, setTimeElapsed] = useState(null);\r\n\r\n  // Vérifie que la prop est bien reçue\r\n  console.log('Received startDate:', startDate);\r\n\r\n  useEffect(() => {\r\n    if (!startDate) {\r\n      console.error('startDate is undefined or null');\r\n      return;\r\n    }\r\n\r\n    const calculateTimeElapsed = () => {\r\n      const now = new Date();\r\n      const start = new Date(startDate); // Conversion de la date\r\n      const diff = Math.abs(now - start);\r\n\r\n      setTimeElapsed({\r\n        days: Math.floor(diff / (1000 * 60 * 60 * 24)),\r\n        hours: Math.floor((diff / (1000 * 60 * 60)) % 24),\r\n        minutes: Math.floor((diff / (1000 * 60)) % 60),\r\n        seconds: Math.floor((diff / 1000) % 60),\r\n      });\r\n    };\r\n\r\n    calculateTimeElapsed();\r\n    const interval = setInterval(calculateTimeElapsed, 1000);\r\n    return () => clearInterval(interval);\r\n  }, [startDate]);\r\n\r\n  if (!timeElapsed) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h3>Time since quitting:</h3>\r\n      <p>\r\n        {timeElapsed.days} days, {timeElapsed.hours} hours, {timeElapsed.minutes} minutes,{' '}\r\n        {timeElapsed.seconds} seconds\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chrono;\r\n*/\nvar _c;\n$RefreshReg$(_c, \"Chrono\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Chrono","_s","userStats","setUserStats","timeElapsed","setTimeElapsed","userId","fetch","then","response","json","data","calculateTimeElapsed","now","Date","start","startDate","diff","Math","abs","days","floor","hours","minutes","seconds","interval","setInterval","clearInterval","catch","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","moneySaved","lifeGained","_c","$RefreshReg$"],"sources":["C:/Users/FX706/Documents/GitHub/No.Cig/nocig/src/components/Chrono.jsx"],"sourcesContent":["/* \r\nÉtape 4 : Connecter le frontend au backend\r\nPour récupérer les données dans ton composant Chrono.jsx, tu vas utiliser fetch ou une bibliothèque comme axios.\r\n\r\nAjout de la récupération des données dans Chrono.jsx :\r\n*/\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nconst Chrono = () => {\r\n    const [userStats, setUserStats] = useState(null);\r\n    const [timeElapsed, setTimeElapsed] = useState(null);\r\n\r\n    useEffect(() => {\r\n        // Remplace l'ID utilisateur par celui de ton backend\r\n        const userId = \"uniqueUserId123\";\r\n\r\n        fetch(`http://localhost:5000/api/stats/${userId}`)\r\n            .then((response) => response.json())\r\n            .then((data) => {\r\n                setUserStats(data);\r\n\r\n                // Calculer le temps écoulé dès que les données sont récupérées\r\n                const calculateTimeElapsed = () => {\r\n                    const now = new Date();\r\n                    const start = new Date(data.startDate);\r\n                    const diff = Math.abs(now - start);\r\n\r\n                    setTimeElapsed({\r\n                        days: Math.floor(diff / (1000 * 60 * 60 * 24)),\r\n                        hours: Math.floor((diff / (1000 * 60 * 60)) % 24),\r\n                        minutes: Math.floor((diff / (1000 * 60)) % 60),\r\n                        seconds: Math.floor((diff / 1000) % 60),\r\n                    });\r\n                };\r\n\r\n                calculateTimeElapsed();\r\n                const interval = setInterval(calculateTimeElapsed, 1000);\r\n                return () => clearInterval(interval);\r\n            })\r\n            .catch((error) => {\r\n                console.error(\"Error fetching user stats:\", error);\r\n            });\r\n    }, []);\r\n\r\n    if (!userStats || !timeElapsed) {\r\n        return <div>Loading...</div>;\r\n    }\r\n\r\n    const { moneySaved, lifeGained } = userStats;\r\n\r\n    return (\r\n        <div>\r\n            <h2>My Progress</h2>\r\n            <div>\r\n                <h3>Time since quitting:</h3>\r\n                <p>\r\n                    {timeElapsed.days} days, {timeElapsed.hours} hours,{\" \"}\r\n                    {timeElapsed.minutes} minutes, {timeElapsed.seconds} seconds\r\n                </p>\r\n            </div>\r\n            <div>\r\n                <p>Money Saved: {moneySaved}€</p>\r\n                <p>Life Gained: {lifeGained} hours</p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Chrono;\r\n\r\n/*\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nconst Chrono = ({ startDate }) => {\r\n  const [timeElapsed, setTimeElapsed] = useState(null);\r\n\r\n  // Vérifie que la prop est bien reçue\r\n  console.log('Received startDate:', startDate);\r\n\r\n  useEffect(() => {\r\n    if (!startDate) {\r\n      console.error('startDate is undefined or null');\r\n      return;\r\n    }\r\n\r\n    const calculateTimeElapsed = () => {\r\n      const now = new Date();\r\n      const start = new Date(startDate); // Conversion de la date\r\n      const diff = Math.abs(now - start);\r\n\r\n      setTimeElapsed({\r\n        days: Math.floor(diff / (1000 * 60 * 60 * 24)),\r\n        hours: Math.floor((diff / (1000 * 60 * 60)) % 24),\r\n        minutes: Math.floor((diff / (1000 * 60)) % 60),\r\n        seconds: Math.floor((diff / 1000) % 60),\r\n      });\r\n    };\r\n\r\n    calculateTimeElapsed();\r\n    const interval = setInterval(calculateTimeElapsed, 1000);\r\n    return () => clearInterval(interval);\r\n  }, [startDate]);\r\n\r\n  if (!timeElapsed) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h3>Time since quitting:</h3>\r\n      <p>\r\n        {timeElapsed.days} days, {timeElapsed.hours} hours, {timeElapsed.minutes} minutes,{' '}\r\n        {timeElapsed.seconds} seconds\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chrono;\r\n*/\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}