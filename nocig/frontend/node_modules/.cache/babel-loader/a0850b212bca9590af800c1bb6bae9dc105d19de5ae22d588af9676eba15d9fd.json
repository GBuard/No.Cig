{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\FX706\\\\Documents\\\\GitHub\\\\No.Cig\\\\nocig\\\\src\\\\components\\\\Chrono.jsx\",\n  _s = $RefreshSig$();\n/* \r\nÉtape 4 : Connecter le frontend au backend\r\nPour récupérer les données dans ton composant Chrono.jsx, tu vas utiliser fetch ou une bibliothèque comme axios.\r\n\r\nAjout de la récupération des données dans Chrono.jsx :\r\n*/\n/*\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nconst Chrono = () => {\r\n    const [userStats, setUserStats] = useState(null);\r\n    const [timeElapsed, setTimeElapsed] = useState(null);\r\n\r\n    useEffect(() => {\r\n        // Remplace l'ID utilisateur par celui de ton backend\r\n        const userId = \"uniqueUserId123\";\r\n\r\n        fetch(`http://localhost:5000/api/stats/${userId}`)\r\n            .then((response) => response.json())\r\n            .then((data) => {\r\n                setUserStats(data);\r\n\r\n                // Calculer le temps écoulé dès que les données sont récupérées\r\n                const calculateTimeElapsed = () => {\r\n                    const now = new Date();\r\n                    const start = new Date(data.startDate);\r\n                    const diff = Math.abs(now - start);\r\n\r\n                    setTimeElapsed({\r\n                        days: Math.floor(diff / (1000 * 60 * 60 * 24)),\r\n                        hours: Math.floor((diff / (1000 * 60 * 60)) % 24),\r\n                        minutes: Math.floor((diff / (1000 * 60)) % 60),\r\n                        seconds: Math.floor((diff / 1000) % 60),\r\n                    });\r\n                };\r\n\r\n                calculateTimeElapsed();\r\n                const interval = setInterval(calculateTimeElapsed, 1000);\r\n                return () => clearInterval(interval);\r\n            })\r\n            .catch((error) => {\r\n                console.error(\"Error fetching user stats:\", error);\r\n            });\r\n    }, []);\r\n\r\n    if (!userStats || !timeElapsed) {\r\n        return <div>Loading...</div>;\r\n    }\r\n\r\n    const { moneySaved, lifeGained } = userStats;\r\n\r\n    return (\r\n        <div>\r\n            <h2>My Progress</h2>\r\n            <div>\r\n                <h3>Time since quitting:</h3>\r\n                <p>\r\n                    {timeElapsed.days} days, {timeElapsed.hours} hours,{\" \"}\r\n                    {timeElapsed.minutes} minutes, {timeElapsed.seconds} seconds\r\n                </p>\r\n            </div>\r\n            <div>\r\n                <p>Money Saved: {moneySaved}€</p>\r\n                <p>Life Gained: {lifeGained} hours</p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Chrono;\r\n*/\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chrono = ({\n  startDate\n}) => {\n  _s();\n  const [timeElapsed, setTimeElapsed] = useState(null);\n  console.log(\"Received startDate:\", startDate);\n  useEffect(() => {\n    const calculateTimeElapsed = () => {\n      const now = new Date();\n      const start = new Date(startDate);\n      const diff = Math.abs(now - start);\n      setTimeElapsed({\n        days: Math.floor(diff / (1000 * 60 * 60 * 24)),\n        hours: Math.floor(diff / (1000 * 60 * 60) % 24),\n        minutes: Math.floor(diff / (1000 * 60) % 60),\n        seconds: Math.floor(diff / 1000 % 60)\n      });\n    };\n    calculateTimeElapsed();\n    const interval = setInterval(calculateTimeElapsed, 1000);\n    return () => clearInterval(interval);\n  }, [startDate]);\n  if (!timeElapsed) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Time since quitting:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [timeElapsed.days, \" days, \", timeElapsed.hours, \" hours,\", \" \", timeElapsed.minutes, \" minutes, \", timeElapsed.seconds, \" seconds\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 9\n  }, this);\n};\n_s(Chrono, \"3kXuq8ndX9ixyjVkdwGffi0FkQU=\");\n_c = Chrono;\nexport default Chrono;\nvar _c;\n$RefreshReg$(_c, \"Chrono\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Chrono","startDate","_s","timeElapsed","setTimeElapsed","console","log","calculateTimeElapsed","now","Date","start","diff","Math","abs","days","floor","hours","minutes","seconds","interval","setInterval","clearInterval","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/FX706/Documents/GitHub/No.Cig/nocig/src/components/Chrono.jsx"],"sourcesContent":["/* \r\nÉtape 4 : Connecter le frontend au backend\r\nPour récupérer les données dans ton composant Chrono.jsx, tu vas utiliser fetch ou une bibliothèque comme axios.\r\n\r\nAjout de la récupération des données dans Chrono.jsx :\r\n*/\r\n/*\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nconst Chrono = () => {\r\n    const [userStats, setUserStats] = useState(null);\r\n    const [timeElapsed, setTimeElapsed] = useState(null);\r\n\r\n    useEffect(() => {\r\n        // Remplace l'ID utilisateur par celui de ton backend\r\n        const userId = \"uniqueUserId123\";\r\n\r\n        fetch(`http://localhost:5000/api/stats/${userId}`)\r\n            .then((response) => response.json())\r\n            .then((data) => {\r\n                setUserStats(data);\r\n\r\n                // Calculer le temps écoulé dès que les données sont récupérées\r\n                const calculateTimeElapsed = () => {\r\n                    const now = new Date();\r\n                    const start = new Date(data.startDate);\r\n                    const diff = Math.abs(now - start);\r\n\r\n                    setTimeElapsed({\r\n                        days: Math.floor(diff / (1000 * 60 * 60 * 24)),\r\n                        hours: Math.floor((diff / (1000 * 60 * 60)) % 24),\r\n                        minutes: Math.floor((diff / (1000 * 60)) % 60),\r\n                        seconds: Math.floor((diff / 1000) % 60),\r\n                    });\r\n                };\r\n\r\n                calculateTimeElapsed();\r\n                const interval = setInterval(calculateTimeElapsed, 1000);\r\n                return () => clearInterval(interval);\r\n            })\r\n            .catch((error) => {\r\n                console.error(\"Error fetching user stats:\", error);\r\n            });\r\n    }, []);\r\n\r\n    if (!userStats || !timeElapsed) {\r\n        return <div>Loading...</div>;\r\n    }\r\n\r\n    const { moneySaved, lifeGained } = userStats;\r\n\r\n    return (\r\n        <div>\r\n            <h2>My Progress</h2>\r\n            <div>\r\n                <h3>Time since quitting:</h3>\r\n                <p>\r\n                    {timeElapsed.days} days, {timeElapsed.hours} hours,{\" \"}\r\n                    {timeElapsed.minutes} minutes, {timeElapsed.seconds} seconds\r\n                </p>\r\n            </div>\r\n            <div>\r\n                <p>Money Saved: {moneySaved}€</p>\r\n                <p>Life Gained: {lifeGained} hours</p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Chrono;\r\n*/\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nconst Chrono = ({ startDate }) => {\r\n    const [timeElapsed, setTimeElapsed] = useState(null);\r\n\r\n    console.log(\"Received startDate:\", startDate);\r\n\r\n    useEffect(() => {\r\n        const calculateTimeElapsed = () => {\r\n            const now = new Date();\r\n            const start = new Date(startDate);\r\n            const diff = Math.abs(now - start);\r\n\r\n            setTimeElapsed({\r\n                days: Math.floor(diff / (1000 * 60 * 60 * 24)),\r\n                hours: Math.floor((diff / (1000 * 60 * 60)) % 24),\r\n                minutes: Math.floor((diff / (1000 * 60)) % 60),\r\n                seconds: Math.floor((diff / 1000) % 60),\r\n            });\r\n        };\r\n\r\n        calculateTimeElapsed();\r\n        const interval = setInterval(calculateTimeElapsed, 1000);\r\n        return () => clearInterval(interval);\r\n    }, [startDate]);\r\n\r\n    if (!timeElapsed) {\r\n        return <div>Loading...</div>;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3>Time since quitting:</h3>\r\n            <p>\r\n                {timeElapsed.days} days, {timeElapsed.hours} hours,{\" \"}\r\n                {timeElapsed.minutes} minutes, {timeElapsed.seconds} seconds\r\n            </p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Chrono;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}